=pod

=head1 NAME

Fennec::Manual::Tests - Examples of Fennec Tests

=head1 DESCRIPTION

This document is the primer for fennec. It gives a synopsys of fennec
capabilities. After this introduction you should move on to
L<Fennec::Manual::TestSuite> for more info.

=head1 SYNOPSIS

This is an example fennec test using all default workflow styles.

=head2 t/MyTest.pm

=head3 Boilerplate

    #!/usr/bin/perl;
    package TEST::MyTest;
    use strict;
    use warnings;
    use Fennec;

    # If the module specified is not installed all tests will be skipped
    use_or_skip 'Module::Name';

    # Tests and workflows (See following headings)
    ...

    1;

=head3 Tests in package space

Tests can be made script style, but you loose parallelization

    ok( 1, "Not grouped" );
    is( 'a', 'a', "" );
    ...

=head3 Tests in groups

It is much better to put tests into parallelizable groups.

    tests hello_world_group => sub {
        my $self = shift;
        ok( 1, "Hello world" );
    };

=head3 RSPEC like testing

    describe 'my group' => sub {
        my $self = shift;

        before_each { $self->reset };

        # 'it()' is an alias to 'tests()'
        it 'my test' => sub {
            my $self = shift;
            ok( 1, 'spec test!' );
        };

        # Nested!
        describe ...;
    };

=head3 Tests under multiple cases

    You can run the same TestSets under multiple cases using the Case workfow
    (loaded by default).
    cases {
        my $self = shift;
        case a => sub {
            my $self = shift;
            ...
        }
        case b => sub { ... }
        tests a => sub { ... }
        tests b => sub { ... }
    }

=head3 Tests as object methods

You can also define test groups, setups, and teardowns as methods on your test
object.

    sub setup_my_setup {
        my $self = shift;
        print "methods prefixed by setup_ will be run before tests defined as methods.";
    }

    sub test_method_as_test_by_prefix {
        my $self = shift;
        ok( 1, "methods prefixed by test_ will be run as method." );
    }

    sub teardown_my_teardown {
        my $self = shift;
        print "method prefixed by teardown_ will be run after tests defined as methods."
    }

=head2 Breakdown

=over 4

=item package TEST::MyTest;

Fennec tests must all be contained inside test packages, they will be used as
objects.

=item use_or_skip 'Module::Name'

Works just like 'use', however if the module requested is not installed all
tests will be skipped with 'Module::Name not installed' as the message. This
can be used at the start of any test that should only be run when a specific
other module is installed.

=item ok( 1, "Not grouped" )

Tests can be anywhere between 'use Fennec::Standalone' and 'done_testing()'.
This means you can write Test::Builder style tests using fennec. The problem
with this is that the tests are run as they are encountered. When you put tests
into groups and workflows they can be parallelized, and are run later.

=item tests hello_world_group => sub { ... }

This declares a test group named hello_world_group. Tests groups will be run in
random order (unless randomization is disabled), and are usually run in
parallel, so it makes sense to seperate your tests into small groups.

=item describe { ... }

Define an RSPEC like workflow. This is available as long as the
L<Fennec::Workflow::SPEC> workflow is loaded. (Loaded by default)

=item cases { ... }

Create a case workflow using cases({...}), then define several cases and
testsets within. Each testset will be run under each case; that is that case
'a' will be run, followed by each of the tests, followed by case 'b' and all
the tests again, etc.

=item sub setup_NAME { ... }

=item sub test_NAME { ... }

=item sub teardown_NAME { ... }

Using the L<Fennec::Workflow::Methods> workflow you can simply define methods
with the tests_, setup_ and teardown_ prefixes to create a subset where the
setups are run, followed by the tests, followed by the teardowns. (Note: The
prefixes are case-insensitive, you can use sub tEsTs_NaMe { ... }, but please
don't)

Note: setups and teardowns defined in this manner only effects testsets also
defined in this manner. They will not effect testsets defined using the tests
{ ... } function.

=back

=head1 SKIP AND TODO

Fennec has the concept of todo tests, tests which are expected to fail. You can
also mark groups as skip if they are really bad.

If an exception is thrown within a TODO block or set, a failing TODO result
will be generated alerting you. This is a todo test and will not count as a
failure in the grand scheme.

    #!/usr/bin/perl;
    package TEST::MyStandaloneTest;
    use strict;
    use warnings;
    use Fennec::Standalone;

    # This will run, but failures will not count.
    tests not_yet_implemented => (
        todo => "This will fail",
        method => sub {
            my $self = shift;
            ok( 0, "Hello world" );
        },
    );

    # This will be skipped completely
    tests 'would die' => (
        skip => "This will die",
        method => sub {
            my $self = shift;
            die( "I eat you" );
        },
    );

    # You can also TODO specific asserts.
    tests 'some pass' => sub {
        ok( 1, 'pass' );
        TODO {
            ok( 0, 'fail' );
        } "This will fail, I will fix it later";
    }

    # Do not forget this!
    done_testing();

    1;

=head1 NEXT STEPS - BETTER MANAGING YOUR TEST SUITE

Next you should read the TestSuite documentation.

L<Fennec::Manual::TestSuite>

=head1 DOCUMENTATION

=over 4

=item STANDALONE

L<Fennec::Manual::Standalone> - Write fennec tests that stand on their own.

=item FENNEC BASED TEST SUITE

L<Fennec::Manual::TestSuite> - How to create a Fennec based test suite.

=item MISSION

L<Fennec::Manual::Mission> - Why does Fennec exist?

=item MANUAL

L<Fennec::Manual> - Advanced usage and extending Fennec.

=back

=head1 AUTHORS

Chad Granum L<exodist7@gmail.com>

=head1 COPYRIGHT

Copyright (C) 2010 Chad Granum

Fennec is free software; Standard perl licence.

Fennec is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the license for more details.
